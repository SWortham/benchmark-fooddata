export declare class ByteBuffer {
    data: Uint8Array;
    index: number;
    length: number;
    constructor(data?: Uint8Array, addViews?: boolean);
    toUint8Array(): Uint8Array;
    readByte(): number;
    readAlphanumeric(): string;
    writeAlphanumeric(contents: string): void;
    readFloat32(): number;
    readByteArray(): Uint8Array;
    readUint32ByteArray(): Uint32Array;
    readInt8ByteArray(): Int8Array;
    readInt16ByteArray(): Int16Array;
    readInt32ByteArray(): Int32Array;
    readFloat32ByteArray(): Float32Array;
    readVarFloat(): number;
    readUint32(): number;
    readUint16(): number;
    readVarUint(): number;
    readInt32(): number;
    readInt16(): number;
    readInt8(): number;
    readVarInt(): number;
    readString(): string;
    static WIGGLE_ROOM: number;
    private _growBy;
    writeByte(value: number): void;
    writeByteArray(value: Uint8Array): void;
    writeUint16ByteArray(value: Uint16Array): void;
    writeUint32ByteArray(value: Uint32Array): void;
    writeInt8ByteArray(value: Int8Array): void;
    writeInt16ByteArray(value: Int16Array): void;
    writeInt32ByteArray(value: Int32Array): void;
    writeFloat32Array(value: Float32Array): void;
    writeVarFloat(value: number): void;
    writeFloat32(value: number): void;
    writeVarUint(value: number): void;
    writeUint16(value: number): void;
    writeUint32(value: number): void;
    writeVarInt(value: number): void;
    writeInt8(value: number): void;
    writeInt16(value: number): void;
    writeInt32(value: number): void;
    static LOW_PRECISION_VALUE: number;
    writeLowPrecisionFloat(value: number): void;
    readLowPrecisionFloat(): number;
    writeString(value: string): void;
}
export default ByteBuffer;
