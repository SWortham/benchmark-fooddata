"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var handler_exports = {};
__export(handler_exports, {
  handle: () => handle
});
module.exports = __toCommonJS(handler_exports);
var import_crypto = __toESM(require("crypto"), 1);
globalThis.crypto = import_crypto.default;
const handle = (app) => {
  return async (event) => {
    const req = createRequest(event);
    const res = await app.fetch(req);
    const arrayBuffer = await res.arrayBuffer();
    const result = {
      statusCode: res.status,
      body: String.fromCharCode(...new Uint8Array(arrayBuffer)),
      headers: {},
      isBase64Encoded: false
    };
    res.headers.forEach((value, key) => {
      result.headers[key] = value;
    });
    return result;
  };
};
const createRequest = (event) => {
  const url = `https://${event.requestContext.domainName}${event.path}`;
  const headers = new Headers();
  for (const [k, v] of Object.entries(event.headers)) {
    if (v)
      headers.set(k, v);
  }
  const method = event.httpMethod;
  const requestInit = {
    headers,
    method
  };
  if (event.body) {
    requestInit.body = event.isBase64Encoded ? atob(event.body) : event.body;
  }
  return new Request(url, requestInit);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handle
});
